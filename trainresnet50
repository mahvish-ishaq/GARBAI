import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
from torchvision import models, datasets
import time

# Check device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

# Define improved data transformations
transform = transforms.Compose([
    transforms.Resize((224, 224)),  
    transforms.RandomHorizontalFlip(),
    transforms.RandomRotation(15),
    transforms.RandomAffine(degrees=15, translate=(0.1, 0.1), shear=10),
    transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])  
])

# Load dataset
train_dataset = datasets.ImageFolder(
    root=r"C:\Users\ACER\Downloads\MAJOR PROJECT GARBAI\GARBAI CODE DETAILS\GARBAI DATASET\Garbage classification\train",
    transform=transform
)
test_dataset = datasets.ImageFolder(
    root=r"C:\Users\ACER\Downloads\MAJOR PROJECT GARBAI\GARBAI CODE DETAILS\GARBAI DATASET\Garbage classification\test",
    transform=transform
)

# DataLoader with balanced class sampling
from torch.utils.data.sampler import WeightedRandomSampler
import numpy as np

targets = np.array(train_dataset.targets)
class_counts = np.bincount(targets)
class_weights = 1.0 / class_counts
sample_weights = class_weights[targets]
sampler = WeightedRandomSampler(sample_weights, len(sample_weights))

train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=32, sampler=sampler)
test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=32, shuffle=False)

# Load ResNet50 for better accuracy
model = models.resnet50(pretrained=True)

# Fine-tune more layers
for param in model.parameters():
    param.requires_grad = False  # Freeze all layers

# Unfreeze last few layers for better training
for param in list(model.layer4.parameters())[-10:]:  
    param.requires_grad = True  

# Modify final layer
num_features = model.fc.in_features
model.fc = nn.Linear(num_features, len(train_dataset.classes))

# Move model to GPU if available
model = model.to(device)

# Define Loss Function and Optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.AdamW(model.parameters(), lr=0.0001)

# Learning rate scheduler
scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=3, gamma=0.5)

# Training Function
def train_model(model, criterion, optimizer, scheduler, epochs=10):
    model.train()
    for epoch in range(epochs):
        start_time = time.time()
        running_loss = 0.0
        correct = 0
        total = 0

        for inputs, labels in train_loader:
            inputs, labels = inputs.to(device), labels.to(device)

            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            running_loss += loss.item()
            _, predicted = outputs.max(1)
            correct += predicted.eq(labels).sum().item()
            total += labels.size(0)

        scheduler.step()  # Adjust learning rate
        accuracy = 100 * correct / total
        print(f"Epoch {epoch+1}, Loss: {running_loss/len(train_loader):.4f}, Accuracy: {accuracy:.2f}%, Time: {time.time() - start_time:.2f}s")

# Train the model
train_model(model, criterion, optimizer, scheduler, epochs=15)

# Save the trained model
torch.save(model.state_dict(), "resnet50_garbage_model.pth")
print("Model saved successfully!")

# Evaluation
model.eval()
correct = 0
total = 0
with torch.no_grad():
    for inputs, labels in test_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        outputs = model(inputs)
        _, predicted = outputs.max(1)
        correct += predicted.eq(labels).sum().item()
        total += labels.size(0)

print(f"Test Accuracy: {100 * correct / total:.2f}%")
